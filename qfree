#!/usr/bin/python
# Shows queue information - lapis/PBS Pro version
# T. Joseph <thomas.joseph@mssm.edu>
import os
import sys
import re

def do_command(cmd):
    '''Runs a command and returns its output as a string.'''
    fin, fout = os.popen4(cmd)
    result = fout.read()
    fin.close()
    fout.close()
    return result
    
def parse_fields(s, field_lengths):
    '''Splits a string into fields based on how long you say each field is.'''
    offset = 0
    data = []
    for field_length in field_lengths:
        data.append(s[offset:offset+field_length].strip())
        offset += field_length
    return data

qstat_out = do_command("qstat").split('\n')

username = os.environ.get("USER")
if(len(sys.argv) > 1):
	username = sys.argv[1]
print "%s's running jobs:" % username
total_num_cpus = 0

# See how many CPUs this user is using
for i in xrange(2, len(qstat_out) - 1):
    line = qstat_out[i]
    x = parse_fields(line, [18, 17, 18, 9, 2, 10])
    job_id = x[0].split('.')[0]
    job_name = x[1]
    queue = x[5]
    if x[2] == username and x[4] == 'R':
        job_info = do_command("qstat -f %s" % job_id)
        num_cpus = int(re.findall("Resource_List.ncpus = ([0-9]+)", job_info)[0])
        print "  %s (%s) using %d cores in queue %s" % (job_name, job_id, num_cpus, queue)
        total_num_cpus += num_cpus
        
print "\n%s is using %d cores in total." % (username, total_num_cpus)
# See how many CPUs are free across the entire cluster
global_info = do_command("qstat -B -f")
global_free_cpus = int(re.findall("Avail_Global:([0-9]+)", global_info)[0])
global_used_cpus = int(re.findall("Used:([0-9]+)", global_info)[0])
print "The whole cluster has %d of %d cores free." % (global_free_cpus, global_used_cpus+global_free_cpus)
